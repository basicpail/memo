PSTAR-V2 내용 파헤치기
Programmable Starter Unit의 생소한 용어, 개념, 구조들을 정리해보기 위한 페이지
 정의
// FUNCTION DEFINE

void SeqTimeRead(void);                  // 외부 입력을 통해 순차 기동 시간 설정 (DIP 스위치 등)
void BuildUpTimeRead(void);             // 압력 상승(Build-Up) 시간 설정 입력을 읽음
void ParallelTimeRead(void);            // 병렬 펌프 운전 시 대기 시간 설정 입력을 읽음
void HeatingOnTimeRead(void);           // 히터 작동 유지 시간 설정 입력을 읽음
void Latch(void);                       // PORTD 출력을 외부 래치 회로에 전달하여 상태 고정

void ERPomRead(unsigned char command);  // EEPROM에서 상태값(Read) 복원
void EPRomWrite(unsigned char command, unsigned char value);  // EEPROM에 상태값 저장

void RunStopCont(unsigned char command); // 릴레이 등을 제어하여 펌프 ON/OFF
void RunStopProc(unsigned char command); // 운전 상태 전환을 위한 내부 로직 처리

void RunInput(void);                    // 운전 관련 버튼/신호 입력 처리
void HeatCont(unsigned char command);   // 히터 제어 신호 제어 (ON/OFF)
void HeatProc(unsigned char command);   // 히터 관련 내부 처리 및 상태 업데이트

void ModeProc(unsigned char command);   // 운전 모드 전환 처리 (Manual / Auto 등)
void KeyProc(void);                     // 키 입력 (버튼 등) 처리

void OverloadProc(unsigned char command); // 과부하 상황 처리 및 램프/운전 상태 제어
void LowpressProc(unsigned char command); // 저압 상태 감지 및 병렬 운전 조건 판단

void LampSigCont(unsigned char name, unsigned char cmd); // 램프 및 경고등 출력 제어

void InputChattProc(void);              // 버튼 등 입력 신호의 채터링 방지 처리
void ComFailErrorFlag(void);            // 통신 실패 오류 상태 처리

void CanRevMsg(void);                   // CAN 수신 메시지 처리 및 상태 저장
void CanIdRead(unsigned char value1, unsigned char value2); // CAN ID 설정 포트 읽기

void ReceiveRunReq(void);               // 수신된 Run Request 신호 처리
void SendRunReq(void);                  // Run Request 신호를 CAN으로 전송

void STBYStartAlarm(void);              // StandBy 상태에서 기동 시작 시 알람 발생 처리

void ConnectProc(unsigned char status); // 통신 연결 상태에 따른 처리
void ConnectFunction(void);             // 주변 장치와의 연결 기능 수행

void Chattering(unsigned char value3, unsigned char value2, unsigned char value1); // 입력 채터링 필터 처리
void StandByLampProc(unsigned char mode); // 대기 상태 램프 처리 로직












#CAN 관련 선언
CAN_MSG_OBJ 구조체 타입 선언부
Can_types.h
typedef union 
{
    uint8_t msgfields;
    struct
    {
        uint8_t idType:1;       // 1 bit (Standard Frame or Extended Frame) 0:Standard ID (11bit), 1:Extended ID(29bit)
        uint8_t frameType:1;    // 1 bit (Data Frame or RTR Frame) 0: Data Frame, 1: Remote Frame(RTR)
        uint8_t dlc:4;          // 4 bit (No of data bytes a message frame contains) DLC(Data Length Code)프레임에 포함된 데이터 바이트수 (0~15)
        uint8_t formatType:1;   // 1 bit (CAN 2.0 Format or CAN_FD Format)
        uint8_t brs:1;          // 1 bit (BRS: Bit Rate Switch) CAN FD에서 더 높은 전송 속도 지원
    };
} CAN_MSG_FIELD;

typedef struct 
{
    uint32_t msgId;          // 29 bit (SID: 11bit, EID:18bit)
    CAN_MSG_FIELD field;     // CAN TX/RX Message Object Control
    uint8_t *data;           // Pointer to message data
} CAN_MSG_OBJ;
#main.c 의 CAN1_Transmit 부분
if(CountCanDelay_mS >= CanDelay_mS)
{
    CountCanDelay_mS = 0;
            
    if(CAN_TX_FIFO_AVAILABLE == (CAN1_TransmitFIFOStatusGet(TXQ) & CAN_TX_FIFO_AVAILABLE))
        tx_status = CAN1_Transmit(TXQ, &msg_tx); //함수 호출 후 반환값을 tx_status에 저장 하는건가?
}
#typedef enum { DLC_0, … DLC_8, … }
unsigned char rx_data1[DLC_8] //tx에서는 왜 사용하지 않지?

 호출

▶ CAN 관련
RA6, RA7 딥 스위치를 통해서 1,2,3으로 결정된다.
#define CAN_ID1             PORTAbits.RA6
#define CAN_ID2             PORTAbits.RA7

can_id, msg_id 변수 선언;
unsigned char CAN_ID = 0;
unsigned int MSG_ID = 0;

CanIdRead(CAN_ID1, CAN_ID2); main에서 함수 호출하여 can_id, msg_id 계산
RA6 == 0 , RA7 == 1 이면 MSG_ID = 0x100; CAN_ID = 1;
RA6 == 1 , RA7 == 0 이면 MSG_ID = 0x200; CAN_ID = 2;
RA6 == 0 , RA7 == 0 이면 MSG_ID = 0x300; CAN_ID = 3;

msg_tx의 필드에 값을 넣어서 tx 를 setting 한다.
msg_tx, msg_tx는 CAN_MSG_OBJ 구조체 타입
msg_tx.msgId = MSG_ID; //CAN_ID1, CAN_ID2에 의해서 결정
msg_tx.field.formatType = CAN_2_0_FORMAT; //can_types.h에 선언된 enum 타입, CAN_2_0_FORMAT = 0, CAN_FD_FORMAT = 1
msg_tx.field.brs = CAN_NON_BRS_MODE; //can_types.h에 선언된 enum 타입, CAN_NON_BRS_MODE = 0 , CAN_BRS_MODE = 1
msg_tx.field.frameType = CAN_FRAME_DATA; //can_types.h에 선언된 enum 타입, CAN_FRAME_DATA = 0, CAN_FRAME_RTR = 1;
msg_tx.field.idType = CAN_FRAME_STD; //can_types.h에 선언된 enum 타입, CAN_FRAME_STD = 0, CAN_FRAME_EXT = 1
msg_tx.field.dlc = DLC_8; //can_types.h에 선언된 enum 타입, DLC_8 == 9
msg_tx.tx_data //처음에는 빈 배열로 초기화 된다. Unsigned char tx_data[8];

while(1) 루프 안에서 tx_data 배열에 대한 요소로 동작 상태 값들을 할당.
상태 초기 값들은 unsigned char 형으로 선언되고, 값에는 정수값 0이 들어간다.
STATUS를 위한 상수 값들이 #define으로 선언되어 있다.
ON 1 , OFF 0 / RUN 1 / STOP 0 등
tx_data[0] = STBY_Start; //
tx_data[1] = RunLamp;
tx_data[2] = Overload;
tx_data[3] = ModeStatus; // MANUAL or ST'BY Mode
tx_data[4] = RUN_req;
tx_data[5] = ResetButton;
tx_data[6] = StandByLamp;
tx_data[7] = TXLowpress;
왜 msg_tx.data = tx_data; 를 빈 배열로 초기화 해놓고 tx_data를 셋팅하는거지? tx_data에 값을 넣고 msg_tx.data에 할당 하는게 더 좋은 방법 아닌가?

CANDelay_mS 값을 통해서 통신 interval을 설정한다.
main.c 에 #define CanDelay_mS 2, unsigned short CountCanDelay_mS로 정의 되어 있음. 하지만 main.c 에서는 그 둘을 다루는 로직이 없다.
trim.c 에서도 unsigned short CountCanDelay_mS = 0; 으로 초기화하고, TMR0_DefaultInterruptHandler 함수에서 CountCanDelay_mS++; 로 처리하고 있다.

TXQ 는 typedef enum 0
CAN_TX_FIFO_FULL 0, CAN_TX_FIFO_AVAILABLE 는 1

CAN1_TransmitFIFOStatusGet // FIFO 버퍼 상태 읽기,
CAN_TX_FIFO_AVAILABLE // 송신 버퍼에 공간이 있는지 확인용 비트마스크
CAN1_Transmit //실제로 메시지 전송

▶타이머와 인터럽트 초기화
#TMRO_Start_Timer() 호출
tmr0.c 의 TMRO_StartTimer가 호출되면서, T0CON0bits.T0EN = 1; 로 설정한다.하지만 타이머는 IDE의 설정에 의해서 자동으로 생성되는 부분으로 추정되기 때문에, 자세한 분석은 미루기한다.



#INTERRUPT_GlobalInterruptEnable() 호출
#define INTERRUPT_GlobalInterruptEnable() (INTC0N0bits.GIE =1 )로 설정. 설정된 INTC0N0bits.GIE는 interrupt_manager.h의 uint8_t GIEBitValue에 할당.

▶EEPROM Read/Write
#ERPomRead(command) 호출
매개변수로 받은 command에 따라서 RunEE 에 다른 값을 할당해 준다.매개변수로 들어오는 명령은 총 4가지. 
RUN_S는 값: 1, RunEE = DATAEE_ReadByte(0x07);
HEAT_S는 값: 2, RunEE = DATAEE_ReadByte(0x04);
MODE_S는 값: 3, RunEE = DATAEE_ReadByte(0x05);
COMSTATUS_S는 값: 4, RunEE = DATAEE_ReadByte(0x08);
로 설정된다. 여기서 DATAEE_ReadByte 는 

#EPRomWrite(command, value) 호출
매개변수로 받은 command에 따라 DATAEE_WriteByte의 주소(Read와 동일)를 정하고, value를 입력한다.
OldRunEEStatus = value;를 통해서 현재와 같은 명령이 내려오면 다시 실행하지 않는다.

▶RUN, HEAT, MODE, MEMORY STAND BY STATUS설정
EEPROM에서 값을 읽어 온 후 그 값을 기준하여 다른 상태 값들을 설정한다. RunEE 값이 정지 상태이면RunStopCont(STOP); 호출. 다시 LampSigCont(RUN_SIG, OFF); 와 LampSigCont(STOP_LAMP, ON);이 호출된다. 여기서 RUN_SIG나 STOP_LAMP 값은 #define RUN_SIG 10 #define STOP_LAMP 3이다.
이 값들을 통해서 LAMPSigCont에서 분기처리 된다. 주의할건, RunLamp 값은 나중에 CAN 메시지에 쓰일 수 있도록 구성해놓았다. 때문에 RunLamp = ON; 으로 값을 할당 해놓음.

▶SYSTEM_ALARM과 Pressure Switch
define SYSTEM_ALARM LATCbits.LATC6
시스템 알람은 특이하게 래치를 사용해서 값을 관리.
SYSTEM_ALARM = 0; // System Status : Normal 로 초기화 해놓고 사용하지는 않는 상태.
스위치 개수에 따라 작동을 달리 하려고 만든거 같은데, 기능이 불명확하다. 먼저 Pressure Switch가 정확히 뭔지 확인 필요. LowPress같은 값과 상관은 없어 보인다. 

▶ Power FAIL 후 Power Recovery
InitFlag는 0으로 초기화 된 후, 정상작동 하면 InitFlag = 1 상태로 진입. 하지만 InitFlag가 0으로 떨어진 후, 다시 1로 올리는 로직이 없다?

#SeqTimeRead() 분석
SeqTime_mS 값을 통해서 UVR, UVP 판단. SeqTimeRead 호출해서 seqTime_mS 값 설정한다. SeqTimeRead 함수를 해석하려면 구조 이해가 필요. 딥스위치와 PORTD 사이에 래치가 있다. PORTD와 래치는 하드웨어 적으로 연결되어 있을 것이라 예상한다. TRISD = 0xFF; 는 PORTD를 입력모드로 설정하여 딥스위치  값을 래치를 통해 받아 들일 준비를 한다. F4, F5, F6 = 0; 으로 설정하는 것은 3비트 선택선으로 래치 선택 주소를 설정하는 것이다. (총 8개의 래치 중 하나를 선택 할 수 있는 것이다) 그런다음 F1 = 1;로 하여 Out Enable 한다. (래치의 출력 활성화 트리거) F1_OUT = PORTD; 로 래치에서 들어온 신호를 PORTD로 읽어서 F1_OUT 변수에 저장한다. 딥스위치는 6개만 사용하니까 상위 2비트 제거하기 위해서 F1_OUT = F1_OUT & 0x3F; 하고, F1 = 0; TRISD = 0x00; 으로 출력 해제하여 래치와 PORTD 간 연결을 끊는다.(충돌 방지 위해 사용하고 해제하는게 국룰)
그 다음 부터는 F1_OUT 비트 값에 따라 시간 계산한다. LSB가 0 이면 10ms 추가
두 번째 비트 부터 20, 40, 80, 160, 320 순으로 설정된다. 모든 스위치가 OFF 상태이면, 총합은 630ms이고, 모든 스위치가 ON 상태이면 총합은 0 이지만 분기문을 따라 300ms?로 설정된다.(SeqTime_mS = 3;) 
Latch 함수는 이러한 래치 상태를 사용전 초기화 시키기 위해 호출한다
왜 이부분은 함수로 정의하지 않았을까?
#UVR 모드 상황에서
리셋 버튼을 누르면 스탠바이 램프가 점등되고, 주 펌프는 메인에서 스탠바이펌프로 넘어간다.
분석을 위해 몇 가지 변수에 대한 이해가 필요하다.
ModeStatus는 2가지 경우에 의해서 변경된다. 첫 번째, 부팅시 EE에 있는 데이터를 가져와서 초기화 시킨다. 두 번째, KeyProc가 호출될 때 이다.
rx_data 구조에 대해서 먼저 알아보자.rx_data[DLC_8]로 초기화 된 후, CanRevMsg()가 호출되면서 rx_data에 값을 할당한다.
CAN_MSG_OBJ msg_rx; 타입 선언 후, CAN1_Receive(&msg_rx)로 호출한다. 그러면 msg_rx 값에는 수신된 CAN 데이터가 할당된다
그리고 msg_rx.msgId와 CAN_ID로 분기처리해서 rx_data1 혹은 rx_data2 혹은 rx_data3에 값을 할당한다. 신기한 부분은, while문도 아닌데 if(nrMsg)조건과 nrMsg—가 존재한다는 것.
#UVP 모드 상황에서
else if(SeqTime_mS == 630) //UVP 왜 범위 지정을 안하는지?
SeqTime_mS === 630인 경우, 바로 RunStatus = STOP, 하고 EEPROM에 STOP을 Write한다.
#InitFlag가 0인 상황에서
CountSeqTime_mS = 0;
이 변수는 tmr0.c의 TMR0_DefaultInterruptHandler 함수에서 CountSeqTime_mS++;로 증가 시키고 있다. 하지만 전역 선언이 안된 변수를 어떻게 참조해서 사용하는걸까? CountSeqTime_mS의 미는 무엇인지?
#OverLoad처리
rx_data에서OverLoad가 올라가 있으면 CountOverload_Flag=1;
▶ComStatus 처리 방법
ComStatus는 CommunicationStatus이고, 통신연결상태(에러, 정상, 매뉴얼, 스탠바이 등)를 나타낸다.
// COM STATUS
#define Com_Error           0
#define Com_Normal          1
#define NoConnection        0
#define StandBy_3to2        1
#define StandBy_2           2
#define StandBy_3           3
#define Manual              4
#define StandBy_3_1RUN      5  // 3 ST'BY 1 RUN
#define StandBy_3to2_1RUN   6  // 3 ST'BY 2 RUN -> 1 RUN
작성중

▶KeyProc 처리 방법
RUN/STOP BUTTON이 눌려질 때 호출되는 부분
KeyProc 이 호출되더라도, 현재PUSH BUTTON의 값을 알 수 없다
래치를 이용해서 입력을 받는게 아닐수도 있다.
IDE에서 설정해 놓으면 저절로 INPUT 설정되고, ISR도 설정되어서 알아서 처리 되어서 값이 바뀌어 있는 것인가?.. 일단 생략하자.
값을 할당한 적이 없는데 조건문에서 어떻게 비교를 할 수 있는 거지?
#define START_PB_I PORTBbits.RB2 선언은 MCU의 I/O에 직접 접근하도록 하는 매크로이다. 단순 상수 선언이 아님.
하지만 인터럽트가 아닌 폴링 방식으로 추정된다.
▶StandBy
#
STBYStartAlarm 호출을 통해서 STBY_Start 설정






Question
인터럽트 발동되는 부분 확인
딥 스위치로 설정 바꾸는 것도 인터럽트 발생하는지?
그렇다면 딥 스위치 데이터를 실시간으로 읽어올 수도 있겠지?
인터럽트 시작과 끝 확인 (인터럽트 동안은 그 인터럽트에 갇혀 있을 테니 pending 되는 위험이 있겠다)

CAN 통신 데이터 프레임 확인
비트단위 값 할당법
MSG_ID에 따른 메시지 우선순위는 없는가?
Transmit할 때 수신 대상을 정해놓고 전송하는지?

init_flag
SYSTEM_ALARM 같은 이해하기 어려운 변수들을 빨리 파악해야겠다.

코드 진행하면서 디버깅 해볼 순 없나?

예외처리 해줘야한다.
ERPomRead 와 EPRomWrite의 함수명 정의는 오타인가?
데이터 read/write 하는 부분에서 주소 값을 상수로 지정해주자
Interval 계산하기 위해서는 타이머 변수를 extern 해줘야 할 거 같은데?
변수명도 수정 해야할게 많다 ex) RunEE -> RunDataFromEEPROM 이런 식, 아니면 구조체 하나 정의한 후 EEPROM Read 한 후 초기화 하는 방법도 있다.
폴링 방식에서 인터럽트 방식으로 다 수정해야 하는거 아닌가?

함수 RunStopCont -> RunStopCount로 수정 필요, Cont를 Control이라는 뜻으로 쓴건가? 혹시 모르니까 다른 고치기전에 Cont 쓴 다른 함수들 확인

SYSTEM_ALARM 값의 용도?

테스트 하려면 장비3대 다 같이 펌웨어 버전 맞춰줘야한다.

코드 버전 별로 셋팅이 다른듯? TIR2209-50-P03_v1.1 은 타이머에 인터럽트 설정이 되어있는거 같은데?
--------------------------------------------------




자료
static
EXT
union
programma


| 접미사    | 의미          
| ------ | ------------------- 
| `_I`   | Input (입력 핀)   
| `_O`   | Output (출력 핀)
| `_F`   | Flag (상태 플래그)
| `_PB`  | Push Button (물리 버튼)
| `_SIG` | Signal (제어 신호)
