
// 예: Default 또는 서브 디스플레이의 Display Script
webMI.addOnload(function(){
  var root = webMI.rootWindow || window;

  function whenReady(cb){
    var tries=0, max=200;
    (function poll(){
      if (root.APP && root.APP.frames && root.APP.popups && root.APP.const.popup) return cb(root.APP);
      if (tries++ > max) return console.error("APP modules not ready");
      setTimeout(poll, 50);
    })();
  }

  whenReady(function(APP){
    // 프레임 풀 초기화(전역에서 1회만 필요하지만, 중복 호출되어도 무해)
    var U = APP.const.popup;
    APP.frames.init({
      viewW:  U.viewport.w,
      viewH:  U.viewport.h,
      blankPath: U.path.blank,
      frames: [U.frames.mask, U.frames.A, U.frames.B, U.frames.C, U.frames.D]
    });

    // 버튼 바인딩
    webMI.addEvent("btnLoginOpen", ["click","mousedown"], function(){
      APP.popups.login(U.rect.loginCenter, {
        withMask: true,
        maskRect: "full",                       // "full"|"same"|{x,y,w,h,z}
        maskOpacity: 0.45,
        preferredFrames: { popup: [U.frames.B] } // 우선 배치할 프레임
      }).then(function(res){
        console.log("[LOGIN OK]", res);
      }).catch(function(err){
        console.warn("[LOGIN CANCEL/ERR]", err);
      });
    });

    webMI.addEvent("btnKeyboardOpen", "click", function(){
      APP.popups.keyboard(U.rect.KeyboardBottom, {
        withMask: false,
        preferredFrames: { popup: [U.frames.C] },
        params: { initial: "" }
      }).then(function(res){
        console.log("[KB OK]", res);
      }).catch(function(err){
        console.warn("[KB CANCEL/ERR]", err);
      });
    });

    // 필요 시 수동 정리
    // webMI.addEvent("btnCloseAll", "click", function(){ APP.popups.closeAll(); });
  });
});



// WEBMIMETHODS.LoginCheck — Server Method Script (Return: String)
//
// 입력: id, pw  (Input Arguments로 추가되어 있어야 함)
// 반환: JSON string -> { success: boolean, level: string, message?: string }

// atvise는 메서드 입력 인자를 동일 이름의 변수로 주입합니다.
// 일부 환경에서 다를 수 있으니, 없으면 기본값 처리:
var _id = (typeof id === "string") ? id : "";
var _pw = (typeof pw === "string") ? pw : "";

// ---- DEMO USER STORE (테스트용 하드코딩 — 운영 시 교체하세요) ----
var USERS = {
  "Level3":    { pw: "3333", level: "Level3" },
  "Level2": { pw: "2222", level: "Level2" },
  "Level1":    { pw: "1111", level: "Level1" }
};

var ok = false, level = "Level1", msg = "";
if (USERS[_id] && USERS[_id].pw === _pw) {
  ok = true;
  level = USERS[_id].level;
} else {
  msg = "Invalid credentials";
}

// JSON 문자열로 반환 (클라이언트에서 safeParse로 파싱)
return JSON.stringify({ success: ok, level: level, message: msg });
